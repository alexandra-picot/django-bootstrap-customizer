{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Django Bootstrap Customizer lets you build a custom Bootstrap theme by creating BootstrapTheme models from the Django admin. BootstrapTheme values are converted to Bootstrap SCSS variables that are used to compile customized Bootstrap CSS when you save your theme, using libsass-python under the hood. Enjoy tailored Bootstrap CSS without having to set up a Node front-end assets pipeline! Features Bootstrap 4. Generates optimized above-the-fold and below-the-fold CSS payloads, perfect for improving your site's Google PageSpeed score. Customized Bootstrap themes for each site in a multi-site installation. No Node/NPM/Gulp/Webpack required. Pages Models Template Tags Views Middleware Advanced Usage FAQ Quickstart Install Django Bootstrap Customizer: pip install django-bootstrap-customizer Update settings: INSTALLED_APPS = ( ... 'django.contrib.sites' , 'bootstrap_customizer' , ... ) MIDDLEWARE = ( ... 'django.contrib.sites.middleware.CurrentSiteMiddleware' , 'bootstrap_customizer.middleware.BootstrapThemeMiddleware' , ... ) SITE_ID = 1 Run migrations: ./manage.py migrate bootstrap_customizer Add URL patterns: from bootstrap_customizer import urls as bootstrap_customizer_urls urlpatterns = [ ... path ( 'bootstrap_customizer/' , include ( bootstrap_customizer_urls )), ... ] Create a BootstrapTheme and SiteBootstrapTheme from the Django admin. Add above-the-fold and below-the-fold CSS to your template: {% load bootstrap_customizer %}<!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > <!-- Your head content --> < style lang = \"css\" > {% bootstrap_theme_css_above_the_fold %} </ style > </ head > < body > <!-- Your body content --> < link rel = \"stylesheet\" type = \"text/css\" href = \" {% bootstrap_theme_css_below_the_fold_url %} \" > </ body > </ html > Screenshot","title":"Home"},{"location":"#about","text":"Django Bootstrap Customizer lets you build a custom Bootstrap theme by creating BootstrapTheme models from the Django admin. BootstrapTheme values are converted to Bootstrap SCSS variables that are used to compile customized Bootstrap CSS when you save your theme, using libsass-python under the hood. Enjoy tailored Bootstrap CSS without having to set up a Node front-end assets pipeline!","title":"About"},{"location":"#features","text":"Bootstrap 4. Generates optimized above-the-fold and below-the-fold CSS payloads, perfect for improving your site's Google PageSpeed score. Customized Bootstrap themes for each site in a multi-site installation. No Node/NPM/Gulp/Webpack required.","title":"Features"},{"location":"#pages","text":"Models Template Tags Views Middleware Advanced Usage FAQ","title":"Pages"},{"location":"#quickstart","text":"Install Django Bootstrap Customizer: pip install django-bootstrap-customizer Update settings: INSTALLED_APPS = ( ... 'django.contrib.sites' , 'bootstrap_customizer' , ... ) MIDDLEWARE = ( ... 'django.contrib.sites.middleware.CurrentSiteMiddleware' , 'bootstrap_customizer.middleware.BootstrapThemeMiddleware' , ... ) SITE_ID = 1 Run migrations: ./manage.py migrate bootstrap_customizer Add URL patterns: from bootstrap_customizer import urls as bootstrap_customizer_urls urlpatterns = [ ... path ( 'bootstrap_customizer/' , include ( bootstrap_customizer_urls )), ... ] Create a BootstrapTheme and SiteBootstrapTheme from the Django admin. Add above-the-fold and below-the-fold CSS to your template: {% load bootstrap_customizer %}<!doctype html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > <!-- Your head content --> < style lang = \"css\" > {% bootstrap_theme_css_above_the_fold %} </ style > </ head > < body > <!-- Your body content --> < link rel = \"stylesheet\" type = \"text/css\" href = \" {% bootstrap_theme_css_below_the_fold_url %} \" > </ body > </ html >","title":"Quickstart"},{"location":"#screenshot","text":"","title":"Screenshot"},{"location":"advanced_usage/","text":"Advanced Usage Note : For basic usage, see the Quickstart section of the Home page . Introduction Django Bootstrap Customizer was built to make it easy to compile and serve Bootstrap CSS in Django, and to facilitate serving that CSS efficiently. This page will show you how to use features of Django and Django Bootstrap Customizer to optimize your CSS delivery, using strategies from Google's PageSpeed Tools Insights . Above-the-fold/Critical CSS Critical, above-the-fold CSS is stored in a BootstrapTheme 's css_above_the_fold field. To improve load times and reduce database usage, the above-the-fold CSS should be inlined and placed in a cache template tag . First, install the Django Bootstrap Customizer BootstrapThemeMiddleware middleware, after Django's CurrentSiteMiddleware : MIDDLEWARE = [ ... 'django.contrib.sites.middleware.CurrentSiteMiddleware' , 'bootstrap_customizer.middleware.BootstrapThemeMiddleware' , ... ] This middleware adds a request.bootstrap_theme attribute containing the current site's BootstrapTheme . We can use this to refresh the following cached template fragment so that we always see the most up-to-date version of our Bootstrap themes. {% load bootstrap_customizer cache %} < head > {% cache 600 css-above-the-fold request.site request.bootstrap_theme.updated %} < style lang = \"css\" > {% bootstrap_theme_css_above_the_fold %} </ style > {% endcache %} </ head > Let's look at the argments to the cache tag: Argument Description 600 Timeout. The cache fragment will time out after 10 minutes css-above-the-fold Cache fragment name, in kebab-case to distinguish it from a template context variable request.site Make fragment unique for each site request.bootstrap_theme.updated Make fragment unique for each version of a BootstrapTheme Below-the-fold/Deferred CSS Non-critical, below-the-fold CSS is stored in a BootstrapTheme 's css_below_the_fold field and served via bootstrap_customizer.views.CSSBelowTheFoldView , which leverages view caching . Google recommends using JavaScript to load below-the-fold CSS after the DOM has finished loading (i.e., after the load event has fired). This speed up page loads because \"styles are applied to the page once it finishes loading, without blocking the initial render of the critical content.\" Here's how to defer loading of below-the-fold CSS: < body > <!-- Adapted from https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery --> < noscript id = \"deferred-styles\" > < link rel = \"stylesheet\" type = \"text/css\" href = \" {% bootstrap_theme_css_below_the_fold_url %} \" > </ noscript > < script > var loadDeferredStyles = function () { var addStylesNode = document . getElementById ( \"deferred-styles\" ); var replacement = document . createElement ( \"div\" ); replacement . innerHTML = addStylesNode . textContent ; document . body . appendChild ( replacement ) addStylesNode . parentElement . removeChild ( addStylesNode ); }; var raf = requestAnimationFrame || mozRequestAnimationFrame || webkitRequestAnimationFrame || msRequestAnimationFrame ; if ( raf ) raf ( function () { window . setTimeout ( loadDeferredStyles , 0 ); }); else window . addEventListener ( 'load' , loadDeferredStyles ); </ script > </ body >","title":"Advanced Usage"},{"location":"advanced_usage/#advanced-usage","text":"Note : For basic usage, see the Quickstart section of the Home page .","title":"Advanced Usage"},{"location":"advanced_usage/#introduction","text":"Django Bootstrap Customizer was built to make it easy to compile and serve Bootstrap CSS in Django, and to facilitate serving that CSS efficiently. This page will show you how to use features of Django and Django Bootstrap Customizer to optimize your CSS delivery, using strategies from Google's PageSpeed Tools Insights .","title":"Introduction"},{"location":"advanced_usage/#above-the-foldcritical-css","text":"Critical, above-the-fold CSS is stored in a BootstrapTheme 's css_above_the_fold field. To improve load times and reduce database usage, the above-the-fold CSS should be inlined and placed in a cache template tag . First, install the Django Bootstrap Customizer BootstrapThemeMiddleware middleware, after Django's CurrentSiteMiddleware : MIDDLEWARE = [ ... 'django.contrib.sites.middleware.CurrentSiteMiddleware' , 'bootstrap_customizer.middleware.BootstrapThemeMiddleware' , ... ] This middleware adds a request.bootstrap_theme attribute containing the current site's BootstrapTheme . We can use this to refresh the following cached template fragment so that we always see the most up-to-date version of our Bootstrap themes. {% load bootstrap_customizer cache %} < head > {% cache 600 css-above-the-fold request.site request.bootstrap_theme.updated %} < style lang = \"css\" > {% bootstrap_theme_css_above_the_fold %} </ style > {% endcache %} </ head > Let's look at the argments to the cache tag: Argument Description 600 Timeout. The cache fragment will time out after 10 minutes css-above-the-fold Cache fragment name, in kebab-case to distinguish it from a template context variable request.site Make fragment unique for each site request.bootstrap_theme.updated Make fragment unique for each version of a BootstrapTheme","title":"Above-the-fold/Critical CSS"},{"location":"advanced_usage/#below-the-folddeferred-css","text":"Non-critical, below-the-fold CSS is stored in a BootstrapTheme 's css_below_the_fold field and served via bootstrap_customizer.views.CSSBelowTheFoldView , which leverages view caching . Google recommends using JavaScript to load below-the-fold CSS after the DOM has finished loading (i.e., after the load event has fired). This speed up page loads because \"styles are applied to the page once it finishes loading, without blocking the initial render of the critical content.\" Here's how to defer loading of below-the-fold CSS: < body > <!-- Adapted from https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery --> < noscript id = \"deferred-styles\" > < link rel = \"stylesheet\" type = \"text/css\" href = \" {% bootstrap_theme_css_below_the_fold_url %} \" > </ noscript > < script > var loadDeferredStyles = function () { var addStylesNode = document . getElementById ( \"deferred-styles\" ); var replacement = document . createElement ( \"div\" ); replacement . innerHTML = addStylesNode . textContent ; document . body . appendChild ( replacement ) addStylesNode . parentElement . removeChild ( addStylesNode ); }; var raf = requestAnimationFrame || mozRequestAnimationFrame || webkitRequestAnimationFrame || msRequestAnimationFrame ; if ( raf ) raf ( function () { window . setTimeout ( loadDeferredStyles , 0 ); }); else window . addEventListener ( 'load' , loadDeferredStyles ); </ script > </ body >","title":"Below-the-fold/Deferred CSS"},{"location":"example_project/","text":"Example Project An example site is included in the example directory of this package. The login is: Username Password admin demo To demonstrate how the package can be used to serve a different Bootstrap theme for each site in a multi-site installation, the example site contains three BootstrapTheme entries, each with a corresponding SiteBootstrapTheme . Each theme and its associated site is detailed below. Default Theme The default Bootstrap theme is available when visiting http://127.0.0.1:8000/ . Custom Theme 1 A customized Bootstrap theme is available when visiting http://localhost:8000/ . Custom Theme 2 A second customized Bootstrap theme is available when visiting http://0.0.0.0:8000/ .","title":"Example Project"},{"location":"example_project/#example-project","text":"An example site is included in the example directory of this package. The login is: Username Password admin demo To demonstrate how the package can be used to serve a different Bootstrap theme for each site in a multi-site installation, the example site contains three BootstrapTheme entries, each with a corresponding SiteBootstrapTheme . Each theme and its associated site is detailed below.","title":"Example Project"},{"location":"example_project/#default-theme","text":"The default Bootstrap theme is available when visiting http://127.0.0.1:8000/ .","title":"Default Theme"},{"location":"example_project/#custom-theme-1","text":"A customized Bootstrap theme is available when visiting http://localhost:8000/ .","title":"Custom Theme 1"},{"location":"example_project/#custom-theme-2","text":"A second customized Bootstrap theme is available when visiting http://0.0.0.0:8000/ .","title":"Custom Theme 2"},{"location":"faq/","text":"FAQ Why is saving a BootstrapTheme so slow? Short answer: it is difficult to add vendor-specific CSS property prefixes without using Node. Bootstrap uses vendor-specific prefixes to add support for modern CSS features in a wider variety of browsers. Flexbox requires vendor-specific prefixes for IE10, for example. The Bootstrap SCSS code does not include any vendor-specific prefixes because they are added after-the-fact with an autoprefixer Node command. Because this plugin uses Python to compile SCSS into CSS, the compiled CSS doesn't include vendor-specific prefixes. My solution was to use cssutils to parse Bootstrap's compiled CSS and extract only those CSS properties that used vendor-specific prefixes, then, using cssutils again, splice these properties into the libsass -compiled CSS. This process takes around 5 seconds on my AMD Ryzen 5 1600. If you can think of a faster way to accomplish this, please open an issue and let me know!","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#why-is-saving-a-bootstraptheme-so-slow","text":"Short answer: it is difficult to add vendor-specific CSS property prefixes without using Node. Bootstrap uses vendor-specific prefixes to add support for modern CSS features in a wider variety of browsers. Flexbox requires vendor-specific prefixes for IE10, for example. The Bootstrap SCSS code does not include any vendor-specific prefixes because they are added after-the-fact with an autoprefixer Node command. Because this plugin uses Python to compile SCSS into CSS, the compiled CSS doesn't include vendor-specific prefixes. My solution was to use cssutils to parse Bootstrap's compiled CSS and extract only those CSS properties that used vendor-specific prefixes, then, using cssutils again, splice these properties into the libsass -compiled CSS. This process takes around 5 seconds on my AMD Ryzen 5 1600. If you can think of a faster way to accomplish this, please open an issue and let me know!","title":"Why is saving a BootstrapTheme so slow?"},{"location":"middleware/","text":"Middleware BootstrapThemeMiddleware bootstrap_customizer.middleware.BootstrapThemeMiddleware Uses the current Site and SiteBootstrapTheme to add the current site's BootstrapTheme to the request. Attributes: request.bootstrap_theme - BootstrapTheme instance for the current site","title":"Middleware"},{"location":"middleware/#middleware","text":"","title":"Middleware"},{"location":"middleware/#bootstrapthememiddleware","text":"bootstrap_customizer.middleware.BootstrapThemeMiddleware Uses the current Site and SiteBootstrapTheme to add the current site's BootstrapTheme to the request. Attributes: request.bootstrap_theme - BootstrapTheme instance for the current site","title":"BootstrapThemeMiddleware"},{"location":"models/","text":"Models BootstrapTheme bootstrap_customizer.models.BootstrapTheme This model stores Bootstrap variables and populates two fields with CSS chunks on save() : css_above_the_fold and css_below_the_fold . Note : This model intentionally does not contain a field for every Bootstrap SCSS variable. It is meant to handle important Bootstrap SCSS variables to create a unique look & feel without overwhelming admins with choice. Bootstrap Fields These fields correspond with Bootstrap SCSS variables . Whereas Django uses snake_case for variables, Bootstrap's SCSS variables use $kebab-case . (Should we call that expensive kebab case?). The enable_rounded field, for example, corresponds with the Bootstrap $enable-rounded SCSS variable. Palette Fields These fields use the RGBColorField field from django-colorful . primary secondary success info warning danger white black light dark component_active_color component_active_bg Option Fields These fields use a BooleanField . enable_rounded enable_shadows enable_gradients Typography Fields These fields use a CharField unless otherwise noted. font_family_base font_size_base line_height_base body_bg ( RGBColorField ) body_color ( RGBColorField ) Headings Fields These fields use a CharField headings_font_family headings_font_weight headings_line_height Non-Bootstrap Fields CSS Storage Fields These fields use a TextField css_above_the_fold css_below_the_fold Utility Fields updated ( DateTimeField ) SiteBootstrapTheme bootstrap_customizer.models.SiteBootstrapTheme This model associates a BootstrapTheme with a specific Site . An instance of this model is used by this package's [Views][views.md] and [Middleware][middleware.md]. Fields bootstrap_theme ( ForeignKey(BootstrapTheme) ) site ( ForeignKey(Site) )","title":"Models"},{"location":"models/#models","text":"","title":"Models"},{"location":"models/#bootstraptheme","text":"bootstrap_customizer.models.BootstrapTheme This model stores Bootstrap variables and populates two fields with CSS chunks on save() : css_above_the_fold and css_below_the_fold . Note : This model intentionally does not contain a field for every Bootstrap SCSS variable. It is meant to handle important Bootstrap SCSS variables to create a unique look & feel without overwhelming admins with choice.","title":"BootstrapTheme"},{"location":"models/#bootstrap-fields","text":"These fields correspond with Bootstrap SCSS variables . Whereas Django uses snake_case for variables, Bootstrap's SCSS variables use $kebab-case . (Should we call that expensive kebab case?). The enable_rounded field, for example, corresponds with the Bootstrap $enable-rounded SCSS variable.","title":"Bootstrap Fields"},{"location":"models/#palette-fields","text":"These fields use the RGBColorField field from django-colorful . primary secondary success info warning danger white black light dark component_active_color component_active_bg","title":"Palette Fields"},{"location":"models/#option-fields","text":"These fields use a BooleanField . enable_rounded enable_shadows enable_gradients","title":"Option Fields"},{"location":"models/#typography-fields","text":"These fields use a CharField unless otherwise noted. font_family_base font_size_base line_height_base body_bg ( RGBColorField ) body_color ( RGBColorField )","title":"Typography Fields"},{"location":"models/#headings-fields","text":"These fields use a CharField headings_font_family headings_font_weight headings_line_height","title":"Headings Fields"},{"location":"models/#non-bootstrap-fields","text":"","title":"Non-Bootstrap Fields"},{"location":"models/#css-storage-fields","text":"These fields use a TextField css_above_the_fold css_below_the_fold","title":"CSS Storage Fields"},{"location":"models/#utility-fields","text":"updated ( DateTimeField )","title":"Utility Fields"},{"location":"models/#sitebootstraptheme","text":"bootstrap_customizer.models.SiteBootstrapTheme This model associates a BootstrapTheme with a specific Site . An instance of this model is used by this package's [Views][views.md] and [Middleware][middleware.md].","title":"SiteBootstrapTheme"},{"location":"models/#fields","text":"bootstrap_theme ( ForeignKey(BootstrapTheme) ) site ( ForeignKey(Site) )","title":"Fields"},{"location":"template_tags/","text":"Template Tags The template tags in the library help get your customized Bootstrap CSS into your templates. To use these template tags, be sure to load the bootstrap_customizer template tag library: {% load bootstrap_customizer %} bootstrap_theme_css_above_the_fold Outputs the CSS from the current site's BootstrapTheme.css_above_the_fold field as a string. Usage < style lang = \"css\" > {% bootstrap_theme_css_above_the_fold %} </ style > bootstrap_theme_css_below_the_fold Outputs the CSS from the current site's BootstrapTheme.css_below_the_fold field as a string. Usage < style lang = \"css\" > {% bootstrap_theme_css_below_the_fold %} </ style > bootstrap_theme_css_below_the_fold_url Outputs a URL to CSSBelowTheFoldView , using a hash from the current site's BootstrapTheme . Usage < link rel = \"stylesheet\" href = \" {% bootstrap_theme_css_below_the_fold_url %} \" >","title":"Template Tags"},{"location":"template_tags/#template-tags","text":"The template tags in the library help get your customized Bootstrap CSS into your templates. To use these template tags, be sure to load the bootstrap_customizer template tag library: {% load bootstrap_customizer %}","title":"Template Tags"},{"location":"template_tags/#bootstrap_theme_css_above_the_fold","text":"Outputs the CSS from the current site's BootstrapTheme.css_above_the_fold field as a string.","title":"bootstrap_theme_css_above_the_fold"},{"location":"template_tags/#usage","text":"< style lang = \"css\" > {% bootstrap_theme_css_above_the_fold %} </ style >","title":"Usage"},{"location":"template_tags/#bootstrap_theme_css_below_the_fold","text":"Outputs the CSS from the current site's BootstrapTheme.css_below_the_fold field as a string.","title":"bootstrap_theme_css_below_the_fold"},{"location":"template_tags/#usage_1","text":"< style lang = \"css\" > {% bootstrap_theme_css_below_the_fold %} </ style >","title":"Usage"},{"location":"template_tags/#bootstrap_theme_css_below_the_fold_url","text":"Outputs a URL to CSSBelowTheFoldView , using a hash from the current site's BootstrapTheme .","title":"bootstrap_theme_css_below_the_fold_url"},{"location":"template_tags/#usage_2","text":"< link rel = \"stylesheet\" href = \" {% bootstrap_theme_css_below_the_fold_url %} \" >","title":"Usage"},{"location":"views/","text":"Views CSSBelowTheFoldView bootstrap_customizer.views.CSSBelowTheFoldView This view returns a CSS response containing the contents of the current site's BootstrapTheme.css_below_the_fold . The view has a required hash keyword argument to uniquely identify it per-theme, obtained using BootstrapTheme.get_hash() . This allows the view to bust its cache when requesting the below-the-fold CSS for a different site, for instance. The view is cached for CACHE_MIDDLEWARE_SECONDS seconds. This view is most often referenced using the bootstrap_theme_css_below_the_fold_url template tag","title":"Views"},{"location":"views/#views","text":"","title":"Views"},{"location":"views/#cssbelowthefoldview","text":"bootstrap_customizer.views.CSSBelowTheFoldView This view returns a CSS response containing the contents of the current site's BootstrapTheme.css_below_the_fold . The view has a required hash keyword argument to uniquely identify it per-theme, obtained using BootstrapTheme.get_hash() . This allows the view to bust its cache when requesting the below-the-fold CSS for a different site, for instance. The view is cached for CACHE_MIDDLEWARE_SECONDS seconds. This view is most often referenced using the bootstrap_theme_css_below_the_fold_url template tag","title":"CSSBelowTheFoldView"}]}